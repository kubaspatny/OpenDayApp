<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
        xmlns="http://www.springframework.org/schema/security"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:sec="http://www.springframework.org/schema/security"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-3.2.xsd
                        http://www.springframework.org/schema/security/oauth2
                        http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

    <beans:bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener" />

    <!-- DELETE THESE IF NEEDED -->

    <oauth:client-details-service id="client-details-service">

        <!-- Allow access to test clients -->
        <oauth:client
                client-id="test"
                secret="test"
                authorized-grant-types="password,refresh_token"
                authorities="ROLE_TEST"
                scope="read, write"
                access-token-validity="300"
                refresh-token-validity="6000"/>

        <!-- Web Application client -->
        <oauth:client
                client-id="web"
                secret="web"
                authorized-grant-types="password,refresh_token"
                authorities="ROLE_WEB"
                scope="read, write"
                access-token-validity="300"
                refresh-token-validity="6000"
                />

        <!-- Android client -->
        <oauth:client
                client-id="android"
                secret="android"
                authorized-grant-types="password,refresh_token"
                authorities="ROLE_ANDROID"
                scope="read, write"
                access-token-validity="300"
                refresh-token-validity="6000"
                />

    </oauth:client-details-service>

    <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>

    <oauth:authorization-server client-details-service-ref="client-details-service" token-services-ref="tokenServices">
        <oauth:authorization-code />
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials />
        <oauth:password authentication-manager-ref="userAuthenticationManager"/>
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter" token-services-ref="tokenServices"/>

    <beans:bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="clientAuthenticationManager"/>
    </beans:bean>

    <beans:bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="typeName" value="Basic"/>
    </beans:bean>

    <beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="test"/>
    </beans:bean>

    <beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="supportRefreshToken" value="true"/>
        <beans:property name="clientDetailsService" ref="client-details-service"/>
    </beans:bean>

    <!-- Definition of the Authentication Service -->
    <sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <sec:anonymous enabled="false"/>
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <sec:authentication-manager alias="userAuthenticationManager">
        <sec:authentication-provider  ref="authenticationProvider">
        </sec:authentication-provider>
    </sec:authentication-manager>

    <beans:bean id="authenticationProvider" class="cz.kubaspatny.opendayapp.service.AuthProvider"/>

    <sec:authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <sec:authentication-provider user-service-ref="client-details-user-service"/>
    </sec:authentication-manager>

    <beans:bean id="client-details-user-service" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="client-details-service" />
    </beans:bean>

    <!-- REST API Endpoints -->
    <sec:http auto-config="true" pattern="/api/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->
    <!-- DELETE NO FURTHER -->

    <sec:http auto-config="true" authentication-manager-ref="userAuthenticationManager">
        <sec:intercept-url pattern="/web/index.xhtml" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <sec:intercept-url pattern="/web/**" access="ROLE_USER,ROLE_ADMIN" />
        <sec:logout logout-url="/logout" logout-success-url="/web/index.xhtml" invalidate-session="true"/>
    </sec:http>

    <!--ACCESS CONTROL LIST-->

    <beans:bean id="dataAccessService" class="cz.kubaspatny.opendayapp.service.DataAccessService">
        <beans:constructor-arg ref="aclService"/>
    </beans:bean>

    <!-- A customized expression handler
        permissionEvaluator: a reference to a custom PermissionEvaluator
        roleHierarchy: defines the role order -->
    <beans:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"
          p:permissionEvaluator-ref="permissionEvaluator"
    />

    <!-- A customized PermissionEvaluator that evaluates permissions via the ACL module -->
    <beans:bean class="org.springframework.security.acls.AclPermissionEvaluator" id="permissionEvaluator">
        <!-- Reference to the ACL service which performs JDBC calls to an ACL database -->
        <beans:constructor-arg ref="aclService"/>
    </beans:bean>

    <!-- A customized ACL service which provides default JDBC implementation -->
    <beans:bean class="org.springframework.security.acls.jdbc.JdbcMutableAclService" id="aclService">
        <beans:constructor-arg ref="dataSource"/>
        <beans:constructor-arg ref="lookupStrategy"/>
        <beans:constructor-arg ref="aclCache"/>
    </beans:bean>

    <!-- A lookup strategy for optimizing database queries -->
    <beans:bean id="lookupStrategy" class="org.springframework.security.acls.jdbc.BasicLookupStrategy">
        <beans:constructor-arg ref="dataSource"/>
        <beans:constructor-arg ref="aclCache"/>
        <beans:constructor-arg ref="aclAuthorizationStrategy"/>
        <beans:constructor-arg ref="auditLogger"/>
    </beans:bean>

    <!-- An ACL cache to minimize calls to the ACL database -->
    <beans:bean id="aclCache" class="org.springframework.security.acls.domain.EhCacheBasedAclCache">
        <beans:constructor-arg>
            <beans:bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <beans:property name="cacheManager">
                    <beans:bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
                </beans:property>
                <beans:property name="cacheName" value="aclCache"/>
            </beans:bean>
        </beans:constructor-arg>
    </beans:bean>

    <!-- An ACL authorization strategy to determine whether a principal is permitted to call administrative methods -->
    <beans:bean id="aclAuthorizationStrategy" class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.core.authority.GrantedAuthorityImpl">
                    <beans:constructor-arg value="ROLE_ADMIN"/>
                </beans:bean>
                <beans:bean class="org.springframework.security.core.authority.GrantedAuthorityImpl">
                    <beans:constructor-arg value="ROLE_ADMIN"/>
                </beans:bean>
                <beans:bean class="org.springframework.security.core.authority.GrantedAuthorityImpl">
                    <beans:constructor-arg value="ROLE_ADMIN"/>
                </beans:bean>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <!-- An audit logger used to log audit events -->
    <beans:bean id="auditLogger" class="org.springframework.security.acls.domain.ConsoleAuditLogger"/>

</beans:beans>